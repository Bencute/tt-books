<?php


namespace frontend\model;


use Exception;
use PDOException;
use Sys;
use system\application\Image;
use system\application\LoginInterface;
use system\db\ActiveRecord;
use system\exception\DbException;
use system\web\UploadFile;

/**
 * Class User
 *
 * @package frontend\model
 */
class User extends ActiveRecord implements LoginInterface
{
    /**
     * @var string
     */
    public string $avatarFilename = 'avatar';

    /**
     * @var int|null
     */
    public ?int $id = null;
    /**
     * @var string|null
     */
    public ?string $name = null;
    /**
     * @var string|null
     */
    public ?string $email = null;
    /**
     * @var string|null
     */
    public ?string $country = null;
    /**
     * @var string|null
     */
    public ?string $passwordHash = null;
    /**
     * @var string|null
     */
    public ?string $description = null;
    /**
     * @var string|null
     */
    public ?string $dateCreate = null;

    /**
     * @var string|null
     */
    public ?string $dateUpdate = null;
    /**
     * @var string|null
     */
    public ?string $dateBirthday = null;

    /**
     * @var string|null
     */
    public ?string $avatar = null;
    /**
     * @var Image|null
     */
    protected ?Image $avatarImage = null;
    /**
     * @var UploadFile|null
     */
    protected ?UploadFile $newAvatar = null;
    /**
     * @var bool
     */
    protected bool $deleteAvatar = false;

    /**
     * @inheritDoc
     */
    public function save(bool $validate = true): bool
    {
        if ($this->newAvatar) {
            $this->getAvatarImage();
            $this->avatar = $this->generateAvatarFilename($this->newAvatar->getExtension());
        } elseif ($this->deleteAvatar) {
            $this->getAvatarImage();
            $this->avatar = null;
        }

        Sys::getApp()->getDB()->beginTransaction();
        try {
            if (parent::save($validate) && $this->applyAvatarChange() && Sys::getApp()->getDB()->commit()) {
                $this->avatarImage = null;
                return true;
            } else {
                throw new Exception('SQL command execute error');
            }
        } catch (DbException $e) {
            // TODO add check debug mode
            Sys::getApp()->getDB()->rollBack();
            throw $e;
        } catch (PDOException $e) {
            if ($this->isNew)
                $this->deletePath();
            // TODO add check debug mode
            throw $e;
        } catch (Exception $e) {
            Sys::getApp()->getDB()->rollBack();
            if ($this->isNew)
                $this->deletePath();
            // TODO add check debug mode
            throw $e;
        }

        return false;
    }

    /**
     * @inheritDoc
     */
    public function update(): bool
    {
        $this->dateUpdate = date('Y-m-d');
        return parent::update(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public static function tableName(): string
    {
        return 'user';
    }

    /**
     * @inheritDoc
     */
    public string $namePrimaryKey = 'id';

    /**
     * @inheritDoc
     */
    public function getAttributes(): array
    {
        return [
            'id',
            'name',
            'email',
            'country',
            'passwordHash',
            'dateBirthday',
            'description',
        ];
    }

    /**
     * @inheritDoc
     */
    public function getAttributesSave(): array
    {
        return [
            'name',
            'email',
            'country',
            'passwordHash',
            'avatar',
            'dateBirthday',
            'description',
        ];
    }

    /**
     * Хэширует переданный пароль и устанавливает сгенерированное значение в поле
     *
     * @param string $password
     * @return bool
     */
    public function setPassword(string $password): bool
    {
        $hash = password_hash($password, PASSWORD_DEFAULT);
        if ($hash === false)
            return false;

        $this->passwordHash = $hash;

        return true;
    }

    /**
     * Сверяет переданный пароль
     *
     * @param string $password
     * @return bool
     */
    public function verifyPassword(string $password): bool
    {
        return password_verify($password, $this->passwordHash);
    }

    /**
     * @inheritDoc
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * @param UploadFile|string $file
     */
    public function setAvatar(UploadFile $file): void
    {
        $this->newAvatar = $file;
        $this->deleteAvatar = false;
    }

    /**
     * @return bool
     */
    public function deleteAvatar(): bool
    {
        $this->deleteAvatar = true;
        $this->newAvatar = null;
        $this->avatar = null;

        return true;
    }

    /**
     * @param string $extension
     * @return string
     */
    protected function generateAvatarFilename(string $extension = 'jpg'): string
    {
        return $this->avatarFilename . '.' . $extension;
    }

    /**
     * @return bool
     */
    private function applyAvatarChange(): bool
    {
        if ($this->newAvatar) {
            $avatar = $this->getAvatarImage();

            if (!is_null($avatar) && !$avatar->remove())
                return false;

            return $this->newAvatar->save($this->getPathAvatarFile(true));
        } elseif ($this->deleteAvatar) {
            $avatar = $this->getAvatarImage();

            if (!is_null($avatar) && !$avatar->remove())
                return false;

            return $this->deletePath();
        }

        return true;
    }

    /**
     * @return Image|null
     */
    public function getAvatarImage(): ?Image
    {
        if (!is_null($this->avatar) && is_null($this->avatarImage)) {
            $path = $this->getPathAvatarFile();
            if (file_exists($path))
                $this->avatarImage = new Image($this, $path);
            else
                return null;
        }
        return $this->avatarImage;
    }

    /**
     * @param bool $create
     * @return string
     */
    public function getPathAvatarFile(bool $create = false): string
    {
        return $this->getPath($create) . '/' . $this->avatar;
    }

    /**
     * @param bool $create
     * @return string
     */
    public function getPath(bool $create = false): string
    {
        return Sys::getApp()->getPathDataUserId($this->getId(), $create);
    }

    /**
     * @return bool
     */
    public function deletePath()
    {
        return Sys::getApp()->deletePath($this->getPath());
    }

    /**
     * @return string
     */
    public function getUrlPath(): string
    {
        return $this->getPathUrl();
    }

    /**
     * @return string
     */
    public function getPathUrl(): string
    {
        return Sys::getApp()->getUrlPathDataUserId($this->getId());
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function delete(): bool
    {
        Sys::getApp()->getDB()->beginTransaction();
        try {
            if (parent::delete() && $this->deletePath() && Sys::getApp()->getDB()->commit()) {
                return true;
            } else {
                throw new Exception('SQL command execute error');
            }
        } catch (Exception $e) {
            // TODO add check debug mode
            Sys::getApp()->getDB()->rollBack();
            throw $e;
        }

        return false;
    }
}